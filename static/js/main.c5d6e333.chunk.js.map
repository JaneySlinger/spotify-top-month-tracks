{"version":3,"sources":["TrackList.js","App.js","serviceWorker.js","index.js","resources/logo.png"],"names":["Song","props","className","key","name","alt","src","albumArt","style","height","artist","TrackList","i","this","tracks","length","map","track","index","renderSong","Component","spotifyApi","SpotifyWebApi","App","token","getHashParams","access_token","setAccessToken","state","loggedIn","topTracks","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","getMyTopTracks","limit","time_range","then","response","console","log","setState","items","item","artists","album","images","url","names","albumArts","logo","Cookies","get","onClick","getTopSongs","redirectUri","clientID","scopes","title","noLogo","btnClassName","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"+RAGA,SAASA,EAAKC,GACV,OACI,wBAAIC,UAAY,YAAYC,IAAKF,EAAMG,MACrC,yBAAKF,UAAU,WAAWG,IAAK,iBAAmBJ,EAAMG,KAAME,IAAOL,EAAMM,SAAUC,MAAO,CAACC,OAAQ,OACrG,gCAASR,EAAMG,MAFjB,MAEmCH,EAAMS,Q,IAyClCC,E,yKAnCAC,GACP,OACI,kBAACZ,EAAD,CACII,KAAMS,KAAKZ,MAAMa,OAAOF,GAAGR,KAC3BM,OAAQG,KAAKZ,MAAMa,OAAOF,GAAGF,OAC7BH,SAAUM,KAAKZ,MAAMa,OAAOF,GAAGL,a,+BAKjC,IAAD,OACL,OAAIM,KAAKZ,MAAMa,OAAOC,OAAS,EAEvB,yBAAKb,UAAY,WACb,wBAAIA,UAAY,aACXW,KAAKZ,MAAMa,OAAOE,KAAI,SAACC,EAAOC,GAC3B,OACI,6BACS,EAAKC,WAAWD,SASzC,kC,GA5BQE,a,yDCLlBC,EAAa,IAAIC,IAuFRC,E,kDApFb,WAAYtB,GAAQ,IAAD,sBAEjB,IACMuB,GAFN,cAAMvB,IACcwB,gBACCC,aAHJ,OAIdF,GACDH,EAAWM,eAAeH,GAE5B,EAAKI,MAAQ,CACXC,WAAUL,EACVM,UAAW,CAAC,CACV1B,KAAM,GACNM,OAAQ,GACRH,SAAU,MAZG,E,4DAiBjB,IACIwB,EADAC,EAAa,GACVC,EAAI,uBACTC,EAAIC,OAAOC,SAASC,KAAKC,UAAU,GAErC,IADAP,EAAIE,EAAEM,KAAKL,GACJH,GACLC,EAAWD,EAAE,IAAMS,mBAAmBT,EAAE,IACxCA,EAAIE,EAAEM,KAAKL,GAEb,OAAOF,I,oCAGK,IAAD,OACXX,EAAWoB,eAAe,CAACC,MAAM,EAAGC,WAAW,eAC5CC,MAAK,SAACC,GACLC,QAAQC,IAAI,oBAAqBF,GACjC,EAAKG,SAAS,CACZlB,UAAWe,EAASI,MAAMjC,KAAI,SAACkC,GAC7B,MACE,CACE9C,KAAM8C,EAAK9C,KACXM,OAAQwC,EAAKC,QAAQ,GAAG/C,KACxBG,SAAU2C,EAAKE,MAAMC,OAAO,GAAGC,QAIrCC,MAAOV,EAASI,MAAMjC,KAAI,qBAAEZ,QAC5B+C,QAASN,EAASI,MAAMjC,KAAI,qBAAEmC,QAAqB,GAAG/C,QACtDoD,UAAWX,EAASI,MAAMjC,KAAI,qBAAEoC,MAAiBC,OAAOC,SAG1DR,QAAQC,IAAI,EAAKnB,MAAME,gB,+BAInB,IAAD,OACP,OACE,yBAAK5B,UAAU,OACb,yBAAKA,UAAY,OAAOI,IAAKmD,IAAMpD,IAAI,eAAeG,MAAO,CAACC,OAAQ,MACtE,6BAEGiD,IAAQC,IAAI,oBACX,6BACE,4BAAQzD,UAAU,cAAc0D,QAAS,kBAAM,EAAKC,gBAApD,8CAGA,6BACE,kBAAC,EAAD,CACE/C,OAAUD,KAAKe,MAAME,cAK7B,kBAAC,IAAD,CACEgC,YAAY,2DACZC,SAAS,mCACTC,OAAQ,CAAC,oBAAqB,kBAAmB,2BAA4B,iBAC7EC,MAAM,sBACNC,OAAO,OACPC,aAAa,sB,GA5EP/C,aCGEgD,QACW,cAA7BjC,OAAOC,SAASiC,UAEe,UAA7BlC,OAAOC,SAASiC,UAEhBlC,OAAOC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.c5d6e333.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TrackList.css';\n\nfunction Song(props) {\n    return (\n        <li className = \"trackItem\" key={props.name}>\n          <img className=\"albumArt\" alt={\"cover art for \" + props.name} src = {props.albumArt} style={{height: 150}}/>\n          <strong>{props.name}</strong> - {props.artist}\n        </li>\n      )\n}\n\nclass TrackList extends Component {\n    renderSong(i){\n        return(\n            <Song\n                name={this.props.tracks[i].name}\n                artist={this.props.tracks[i].artist}\n                albumArt={this.props.tracks[i].albumArt}\n            />\n        )\n    }\n\n    render() { \n        if (this.props.tracks.length > 1) {\n            return (\n                <div className = \"wrapper\">\n                    <ol className = \"TrackList\">\n                        {this.props.tracks.map((track, index) => {\n                            return (\n                                <div >\n                                        {this.renderSong(index)}\n                                </div>   \n                            );\n                        })}\n                    </ol>\n                </div>\n            );\n        } else {\n            return (\n                <div></div>\n            );\n        }\n        \n        \n    }\n}\n \nexport default TrackList;","import React, { Component } from 'react';\nimport './App.css';\nimport TrackList from './TrackList.js';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport logo from './resources/logo.png'\nimport {SpotifyAuth} from 'react-spotify-auth'\nimport Cookies from 'js-cookie'\nconst spotifyApi = new SpotifyWebApi();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if(token){\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false,\n      topTracks: [{\n        name: '', \n        artist: '', \n        albumArt: ''}]\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getTopSongs(){\n    spotifyApi.getMyTopTracks({limit:5, time_range:\"short_term\"})\n      .then((response) => {\n        console.log(\"track information\", response);\n        this.setState({\n          topTracks: response.items.map((item) => {\n            return(\n              {\n                name: item.name,\n                artist: item.artists[0].name,\n                albumArt: item.album.images[0].url\n              }\n            )\n          }),\n          names: response.items.map(({name}) => name),\n          artists: response.items.map(({artists}) => artists[0].name),\n          albumArts: response.items.map(({album}) => album.images.url)\n          \n        })\n        console.log(this.state.topTracks);\n        }) \n  }\n\n  render() { \n    return (\n      <div className=\"App\"> \n        <img className = \"logo\" src={logo} alt=\"spotify logo\" style={{height: 80}}/>  \n        <div>\n          {/* If there is a cookie named 'spotifyAuthToken' */}\n          {Cookies.get('spotifyAuthToken') ? (\n            <div>\n              <button className=\"checkButton\" onClick={() => this.getTopSongs()}>\n                Check Your Top Songs from the Last 4 Weeks\n              </button>\n              <div>\n                <TrackList\n                  tracks = {this.state.topTracks}\n                />\n              </div>\n            </div>\n          ) : (\n          <SpotifyAuth\n            redirectUri='https://janeyslinger.github.io/spotify-top-month-tracks/'\n            clientID='c3d812e9f0fe4bc6a1b3c3a75bbfa4c6'\n            scopes={['user-read-private', 'user-read-email', 'user-read-playback-state', 'user-top-read']}\n            title=\"Log in with Spotify\"\n            noLogo='true'\n            btnClassName='checkButton'\n          />)}\n        </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.7a34cf42.png\";"],"sourceRoot":""}